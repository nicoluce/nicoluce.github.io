{"version":3,"sources":["components/DiceRoller.tsx","views/HomeView.tsx","App.tsx","store/index.ts","index.tsx"],"names":["D20","useState","Math","random","position","setPosition","geo","useMemo","bufferGeometry","Geometry","fromBufferGeometry","mergeVertices","vertices","map","v","x","y","z","faces","f","a","b","c","toConvexProps","THREE","useConvexPolyhedron","args","mass","ref","api","bind","useDrag","first","last","vxvy","vx","vy","set","velocity","pointerEvents","subscribe","value","receiveShadow","castShadow","attach","connector","connect","state","props","Plane","useBox","type","color","opacity","style","height","window","innerHeight","pixelRatio","devicePixelRatio","colorManagement","shadowMap","gl","alpha","antialias","camera","fov","intensity","angle","penumbra","shadow-mapSize-width","shadow-mapSize-height","defaultContactMaterial","restitution","rotation","PI","Header","Content","display","alignItems","Footer","App","path","element","rootReducer","combineReducers","store","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac8157b5.chunk.js","sourcesContent":["import { Physics, useBox, useConvexPolyhedron } from \"@react-three/cannon\";\nimport React, { useMemo, useState } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Canvas } from \"react-three-fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { AppState } from \"store\";\nimport * as THREE from \"three\";\nimport { Geometry } from \"three-stdlib/deprecated/Geometry\";\n\nconst mapStateToProps = (state: AppState) => ({});\n\nconst connector = connect(mapStateToProps, {});\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\ntype Props = {} & PropsFromRedux;\n\nfunction toConvexProps(bufferGeometry: any) {\n  const geo = new Geometry().fromBufferGeometry(bufferGeometry);\n  // Merge duplicate vertices resulting from glTF export.\n  // Cannon assumes contiguous, closed meshes to work\n  geo.mergeVertices();\n  return [\n    geo.vertices.map((v: any) => [v.x, v.y, v.z]),\n    geo.faces.map((f: any) => [f.a, f.b, f.c]),\n    []\n  ];\n}\n\nfunction D20() {\n  const [position, setPosition] = useState([Math.random() * 0.5, 1, Math.random() * 0.5]);\n  // const { size, viewport } = useThree();\n  // const aspect = size.width / viewport.width;\n\n  const geo = useMemo(() => toConvexProps(new THREE.IcosahedronGeometry(0.1)), []);\n  const [ref, api] = useConvexPolyhedron(() => ({\n    args: geo as any,\n    mass: 0.1,\n    position\n  }));\n  const bind = useDrag(\n    ({ first, last, vxvy: [vx, vy] }) => {\n      if (first) {\n        api.mass?.set(0);\n        api.velocity.set(0, 0, 0);\n        const [x, , z] = position;\n        api.position.set(x, 0.5, z);\n      } else if (last) {\n        api.mass?.set(0.6);\n        api.velocity.set(10 * vx, 0, 10 * vy);\n      } else {\n        api.velocity.set(2 * vx, 0, 2 * vy);\n      }\n    },\n    { pointerEvents: true }\n  );\n  api.position.subscribe(value => setPosition(value));\n  return (\n    <mesh receiveShadow castShadow ref={ref} {...bind()}>\n      <icosahedronGeometry attach=\"geometry\" args={[0.1]} />\n      <meshLambertMaterial attach=\"material\" />\n    </mesh>\n  );\n}\n\nconst DiceRoller: React.FunctionComponent<Props> = props => {\n  function Plane(props: any) {\n    const [ref] = useBox(() => ({\n      args: [2, 0.1, 2],\n      mass: 0,\n      type: \"Static\",\n      ...props\n    }));\n    return (\n      <mesh ref={ref} receiveShadow>\n        <boxBufferGeometry attach=\"geometry\" args={[2, 0, 2]} />\n        {/* <meshBasicMaterial attach=\"material\"/> */}\n        <shadowMaterial attach=\"material\" color=\"#000000\" opacity={1} />\n      </mesh>\n    );\n  }\n\n  // const [cameraPosition, setCameraPosition] = useState([0, 2])\n\n  return (\n    <Canvas\n      style={{ height: window.innerHeight }}\n      pixelRatio={window.devicePixelRatio}\n      colorManagement\n      shadowMap\n      gl={{ alpha: false, antialias: true }}\n      camera={{\n        fov: 50,\n        position: [0, 2, 2]\n      }}\n    >\n      <color attach=\"background\" args={[148 / 255, 198 / 255, 214 / 255]} />\n      {/* <fog attach=\"fog\" args={[\"#a0a0a0\", 1, 5]} /> */}\n      <hemisphereLight intensity={0.35} />\n      <spotLight\n        position={[5, 5, 5]}\n        angle={0.3}\n        penumbra={1}\n        intensity={2}\n        castShadow\n        shadow-mapSize-width={256}\n        shadow-mapSize-height={256}\n      />\n      <gridHelper args={[2, 20, \"#000000\", \"#000000\"]} />\n      <Physics\n        defaultContactMaterial={{\n          restitution: 0.6\n        }}\n      >\n        <Plane />\n        <Plane position={[0, 2, 0]} />\n        <Plane rotation={[0, 0, -Math.PI / 2]} position={[1, 1, 0]} />\n        <Plane rotation={[0, 0, -Math.PI / 2]} position={[-1, 1, 0]} />\n        <Plane rotation={[-Math.PI / 2, 0, 0]} position={[0, 1, 1]} />\n        <Plane rotation={[-Math.PI / 2, 0, 0]} position={[0, 1, -1]} />\n        <D20 />\n      </Physics>\n    </Canvas>\n  );\n};\n\nexport default connector(DiceRoller);\n","import { Layout } from \"antd\";\nimport DiceRoller from \"components/DiceRoller\";\nimport React from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { AppState } from \"store\";\n\nconst mapStateToProps = (state: AppState) => ({});\n\nconst connector = connect(mapStateToProps, {});\n\ntype PropsFromRedux = ConnectedProps<typeof connector>;\ntype Props = {} & PropsFromRedux;\n\nconst HomeView: React.FunctionComponent<Props> = props => {\n  return (\n    <Layout>\n      <Layout.Header></Layout.Header>\n      <Layout.Content style={{ display: \"flex\", alignItems: \"baseline\" }}>\n        <DiceRoller />\n      </Layout.Content>\n      <Layout.Footer></Layout.Footer>\n    </Layout>\n  );\n};\n\nexport default connector(HomeView);\n","import React from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport HomeView from \"views/HomeView\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <Routes>\r\n      <Route path=\"/\" element={<HomeView />} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers, configureStore } from \"@reduxjs/toolkit\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst rootReducer = combineReducers({});\r\n\r\nconst store = configureStore({\r\n  reducer: rootReducer\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n\r\nexport const useAppSelector = (selector: (state: AppState) => AppState) => useSelector(selector);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport \"./style/index.less\";\r\nimport { ParallaxProvider } from \"react-scroll-parallax\";\r\nimport App from \"./App\";\r\nimport store from \"./store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={store}>\r\n        <ParallaxProvider>\r\n          <App />\r\n        </ParallaxProvider>\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}